# Step 8: Extract Shares with Timestamp where Pradip Commented
import csv
import pandas as pd
import os

# --- Step 0: Load folder path from input.csv ---
csv_file = "input.csv"
df = pd.read_csv(csv_file)
folder_path = df.loc[0, "Folder Path"]

# Build paths
DETECTED_TXT   = os.path.join(folder_path, "detected_speakers.txt")
FILTERED_TXT   = os.path.join(folder_path, "filtered_transcription.txt")
OUTPUT_CSV     = os.path.join(folder_path, "extracted_stocks.csv")

# --- Step 1: Load Detected Speakers ---
with open(DETECTED_TXT, "r", encoding="utf-8") as f:
    detected = f.read().strip().splitlines()

anchor_speaker = detected[0].split(":")[1].strip()
pradip_speaker = detected[1].split(":")[1].strip()

print(f"✅ Using Speaker Mapping → Anchor = {anchor_speaker}, Pradip = {pradip_speaker}")

# --- Step 2: Load Filtered Transcript (Anchor + Pradip only) ---
with open(FILTERED_TXT, "r", encoding="utf-8") as f:
    convo_text = f.read()

# --- Step 3: GPT Prompt ---
prompt_extract_stocks = f"""
You are analyzing a transcript between a TV Anchor ({anchor_speaker})
and stock expert Mr. Pradip Halder ({pradip_speaker}).

Task:
- Identify all STOCK NAMES or COMPANY NAMES discussed by ({pradip_speaker}) Pradip and put it in STOCK NAME column.
- For all STOCK NAMES find out NSE/BSE STOCK SYMBOL and put it in STOCK SYMBOL column, for few companies stock name and symbol name different, so give me actual Symbol VVI.
- Capture the START TIME from the transcript line where ({pradip_speaker}) Pradip first comments on each stock & put in START TIME column.

Return strictly as CSV with header:
STOCK NAME, STOCK SYMBOL, START TIME

No duplicates. Only those STOCKS on which ({pradip_speaker}) has given his analysis.

Transcript:
{convo_text}
"""

# --- Step 4: Call GPT ---
response = client.chat.completions.create(
    model="gpt-5",
    messages=[
        {"role": "system", "content": "You are a financial transcript analyzer. Extract stock names with timestamps in CSV format."},
        {"role": "user", "content": prompt_extract_stocks}
    ]
)

# --- Step 5: Process GPT Output ---
csv_raw = response.choices[0].message.content.strip()
print("\n✅ Raw Extracted CSV:\n", csv_raw)

# --- Step 6: Save GPT Output to CSV File ---
with open(OUTPUT_CSV, "w", encoding="utf-8", newline="") as f:
    f.write(csv_raw)

print(f"✅ GPT extraction saved as {OUTPUT_CSV}")
