build this using:
•	Backend: Flask (Python) for the REST API
•	Database: PostgreSQL (Replit's built-in database)
•	Authentication: JWT tokens for secure sessions
•	Frontend: Connect existing React app to real backend
Let me begin with:
1.	Setting up Python backend environment
2.	Installing Flask and other dependencies
3.	Creating the backend folder structure
need to:
•	Install Python
•	Create backend folder structure
•	Install Flask, Flask-CORS, Flask-JWT-Extended, psycopg2, bcrypt, etc.
•	Set up the database
•	Create API endpoints


Till now We have frontend ready. This frontend includes three tools:
1.	Media Rationale.
2.	Premium Rationale – coming soon.
3.	Manual Rationale.
Media Rationale Workflow:
Inside Media Rationale, users can provide a YouTube URL and click Fetch Video.
When a valid URL is entered, fetch youtube video using yt dlp runs automatically to fetch the video metadata, including:
•	Title
•	Channel name
•	Channel logo (get logo path from channels database )
•	Upload date and time
•	Video duration
Below this information, a Start Analysis button appears.
When clicked:
•	Creates a job,
•	Stores all metadata for future steps, and
•	Initiates all 15 processing steps sequentially.
•	We will generate those 15 step codes in py in pipeline py module


•	Step	Description
1	Download video audio (yt-dlp)
2	Download auto captions (JSON)
3	Transcribe audio using AssemblyAI
4	Merge captions & transcript
5	Translate to English (Google Translate API)
6	Detect speakers (OpenAI)
7	Keep only Anchor & Pradip lines
8	Extract stock mentions + timestamps
9	Match with master file (api-scrip-master.csv)
10	Convert timestamps to actual time/date
11	Fetch CMP from Dhan API
12	Use OpenAI to extract analysis text
13	Fetch and plot stock chart (Dhan API)
14	Generate final branded PDF (ReportLab)
15	Upload signed PDF + update logs
Suggested File / module layout (backend) for Media Rationale
─ pipeline/
│  ├─ step01_download_audio.py
│  ├─ step02_download_captions.py
│  ├─ step03_assemblyai_transcribe.py
│  ├─ step04_merge_transcripts.py
│  ├─ step05_translate.py
│  ├─ step06_speaker_detect.py
│  ├─ step07_filter_transcription.py
│  ├─ step08_extract_stock_mentions.py
│  ├─ step09_map_master_file.py
│  ├─ step10_convert_timestamp.py
│  ├─ step11_fetch_cmp.py
│  ├─ step12_extract_analysis.py
│  ├─ step13_generate_charts.py
│  ├─ step14_generate_pdf.py
│  ├─ step15_save_and_sign_log.py


Activity Log
The Activity Log includes filters:
•	By Tool: Media Rationale / Premium Rationale / Manual Rationale
•	By User Name
•	By Status: All Activities / Job Started / Job Completed / Job Failed / Login / Logout
•	By Date Range
Each activity entry displays:
•	User avatar and name
•	Status
•	Tool used
•	Job name (e.g., “Started new Media Rationale job for YouTube video”)
•	Job ID
•	Date and time (e.g., “20h ago, 03:55 PM”)

Saved Rationale
The Saved Rationale section stores all generated rationales and includes filters:
•	By Tool (all three tools)
•	By Channel Name (channels listed in Manage Channel)
•	By Date Range
All Saved Rationale has 
•	Youtube Video Title
•	Channel Name
•	Used Tool
•	Video Date
•	Job ID
•	View progress Download Unsigned (generated in step 14) PDF
•	Upload Signed PDF
•	Download Signed PDF
•	Show When Signed PDF Uploaded

Profile
The Profile page displays:
•	First Name, Last Name
•	Email and Mobile Number
•	Role (Admin / Employee)
•	Avatar
•	Member since (e.g., Jan 2025)
•	Jobs created (e.g., 47)
•	Last login (e.g., Today)
It also includes a Change Password option.

Users (Admin/Employees): (Admin Options)
Admins can:
•	Edit user details (Avatar, First Name, Last Name, Email Address, Mobile No, Role, Password)
•	Delete User
•	Add new users: Fields: (Avatar, First Name, Last Name, Email Address, Mobile No, Role, Password, Confirm Password)

API Keys (admin option)
The API Keys section allows the admin to configure: These api keys will be used to create tools pipeline python codes, so store them in db and manageable by admin. Admin can add, remove , update keys/json file 
•	OpenAI API Key
•	AssemblyAI API Key
•	Google Cloud JSON upload
•	Dhan API Key

PDF Template (admin option)
The PDF Template section includes editable fields used in rationale toold for generating the PDF: so store in db and manageable by admin, admin can add, remove update the fields value.
•	Company Name
•	Registration Details
•	Disclaimer Text
•	Disclosure Text
•	Company Data

Upload Required Files (admin option) used in pipeline py codes so store these files and manageable by admin. Admin can  remove, delete, update
This page allows uploading:
•	API Script Master File (CSV) – used in Step 9
•	Company Logo – used in the dashboard header, login page, and PDF (Step 14)
•	Custom Fonts (Optional) – up to two fonts, used for PDF generation in Step 14

Manage Channel. (admin option) will be used in py pipeline so store channel name channel logo path and url in db and manageable by admin)
The Manage Channel page lists all channels with:
•	Channel Name
•	Channel Logo
•	Channel URL

First focus on building complete architecture, installing server requirements, setting up server codes, then backend, database, and do all step by step. Remember this : The Replit domain doesn't have --5000 in it - it uses a different port routing system
first build login system, setup database for users, set user role-based access.  Add a real admin user and a employee user . and in frontend also remove mock-up users and add show real users connected with database.
Admins can:
•	Edit user details (Avatar, First Name, Last Name, Email Address, Mobile No, Role, Password)
•	Delete User. Shows a confirmation popup
•	Add new users: Fields: (Avatar, First Name, Last Name, Email Address, Mobile No, Role, Password, Confirm Password)
All must effect changes in database.  I have complete frontend design ready
Strictly, do not change my react frontend design. Keep my design forms, fields, animation, CSS, workflow flow everything same. You must follow how my design is working. Make my design functional for user option for now. Once done we will do other part.
