# Step 14: generate PDF
import os
import pandas as pd
from reportlab.lib.pagesizes import A4
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak,
    Table, TableStyle, Flowable, KeepInFrame
)
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.pdfgen import canvas as pdfcanvas
from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_RIGHT, TA_JUSTIFY
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from PIL import Image as PILImage, ImageDraw

# ========= USER PATHS (Update if needed) =========
GOOGLE_FONT_REGULAR = "/content/NotoSans-Regular.ttf"
GOOGLE_FONT_BOLD    = "/content/NotoSans-Bold.ttf"

# ========= CONFIG from /content/input.csv =========
input_csv = "/content/input.csv"
inp = pd.read_csv(input_csv, encoding="utf-8-sig")
cfg = inp.iloc[0]
folder_path  = str(cfg["Folder Path"]).strip().rstrip("/\\")
channel_logo = str(cfg["Channel Logo"]).strip()
channel_name = str(cfg["Channel Name"]).strip()
channel_url  = str(cfg["YouTube Video URL"]).strip()

stocks_csv = os.path.join(folder_path, "stocks_with_chart.csv")
company_logo = "/content/PHD-Capital-Logo.webp"
# Build output file name dynamically from input.csv values
# Prefer DATE and TIME from input.csv if present
# Build output file name dynamically from input.csv values (using columns: Date, Time, Channel Name)
# Sanitize for filesystem safety
sanitize = lambda s: str(s).strip().replace(" ", "_").replace(":", "-").replace("/", "-")

date_str = sanitize(cfg.get("Date", ""))
time_str = sanitize(cfg.get("Time", ""))
chan_str = sanitize(channel_name)
output_pdf = os.path.join(folder_path, f"Rationale_{date_str}_{chan_str}_{time_str}.pdf")


# ========= DATA =========
df = pd.read_csv(stocks_csv, encoding="utf-8-sig")

# ========= FONTS (Google Font: Noto Sans) =========
BASE_REG = "NotoSans"
BASE_BLD = "NotoSans-Bold"
if os.path.exists(GOOGLE_FONT_REGULAR):
    pdfmetrics.registerFont(TTFont(BASE_REG, GOOGLE_FONT_REGULAR))
else:
    raise FileNotFoundError(f"Missing {GOOGLE_FONT_REGULAR}. Place your Google font TTF there.")

if os.path.exists(GOOGLE_FONT_BOLD):
    pdfmetrics.registerFont(TTFont(BASE_BLD, GOOGLE_FONT_BOLD))
else:
    raise FileNotFoundError(f"Missing {GOOGLE_FONT_BOLD}. Place your Google font TTF there.")

# ========= STYLES =========
styles = getSampleStyleSheet()
BLUE = colors.HexColor("#003366")
PAGE_W, PAGE_H = A4
M_L, M_R, M_T, M_B = 44, 44, 96, 52

# Helper to create ParagraphStyles with REG as default
def PS(name, **kw):
    if "fontName" not in kw:
        kw["fontName"] = BASE_REG
    return ParagraphStyle(name, parent=styles["Normal"], **kw)

# Text styles
subheading_style = PS(
    "subheading_style",
    fontSize=16, leading=20, textColor=colors.black,
    spaceAfter=10, spaceBefore=6, alignment=TA_LEFT,
    fontName=BASE_BLD
)
small_grey   = PS("small_grey",  fontSize=9.2, leading=12, textColor=colors.HexColor("#666666"))
body_style   = PS("body_style",  fontSize=10.8, leading=15.6, spaceAfter=10, alignment=TA_JUSTIFY)
label_style  = PS("label_style", fontSize=11,   leading=14.5, spaceAfter=4, alignment=TA_LEFT,
                  textColor=BLUE, fontName=BASE_BLD)
date_bold    = PS("date_bold",   fontSize=11,   leading=13.5, alignment=TA_RIGHT,
                  textColor=colors.black, fontName=BASE_BLD)
time_small   = PS("time_small",  fontSize=9.6,  leading=11.5, alignment=TA_RIGHT,
                  textColor=colors.HexColor("#666666"))
center_small = PS("center_small",fontSize=11,   leading=14, alignment=TA_CENTER,
                  textColor=BLUE, fontName=BASE_BLD)

# ========= Rounded Heading Flowable =========
class RoundedHeading(Flowable):
    """Left-aligned text, equal padding on all sides, bold, rounded rectangle background."""
    def __init__(self, text, fontName=BASE_BLD, fontSize=14.5, pad_x=12, pad_y=10,
                 radius=9, bg=BLUE, fg=colors.white, width=None, align="left"):
        Flowable.__init__(self)
        self.text = text
        self.fontName = fontName
        self.fontSize = fontSize
        self.pad_x = pad_x
        self.pad_y = pad_y
        self.radius = radius
        self.bg = bg
        self.fg = fg
        self.width = width
        self.align = align  # kept for completeness; we use left by default

    def wrap(self, availWidth, availHeight):
        self.eff_width = self.width or availWidth
        # Height = text height + equal padding + minor optical tweak
        self.eff_height = self.fontSize + 2*self.pad_y + 2
        return self.eff_width, self.eff_height

    def draw(self):
        c = self.canv
        w, h = self.eff_width, self.eff_height
        r = self.radius

        c.saveState()
        # Background rounded rect
        c.setFillColor(self.bg)
        c.setStrokeColor(self.bg)
        c.roundRect(0, 0, w, h, r, fill=1, stroke=0)

        # Text
        c.setFillColor(self.fg)
        c.setFont(self.fontName, self.fontSize)
        text_w = c.stringWidth(self.text, self.fontName, self.fontSize)
        # Left align with left padding
        tx = self.pad_x
        # Vertically center within the rounded bar
        ty = (h - self.fontSize) / 2.0 - 1
        c.drawString(tx, ty, self.text)
        c.restoreState()

# Heading factory (full-width)
def heading(text):
    return RoundedHeading(text, width=(PAGE_W - M_L - M_R), align="left")

# ========= Utilities =========
def make_round_logo(src_path, diameter_px=360):
    try:
        im = PILImage.open(src_path).convert("RGBA")
        side = min(im.size)
        x0 = (im.width - side) // 2
        y0 = (im.height - side) // 2
        im = im.crop((x0, y0, x0 + side, y0 + side)).resize((diameter_px, diameter_px), PILImage.LANCZOS)
        mask = PILImage.new("L", (diameter_px, diameter_px), 0)
        draw = ImageDraw.Draw(mask); draw.ellipse((0, 0, diameter_px, diameter_px), fill=255)
        out = PILImage.new("RGBA", (diameter_px, diameter_px), (255, 255, 255, 0))
        out.paste(im, (0, 0), mask=mask)
        tmp_path = os.path.join(folder_path, "_round_channel_logo.png")
        out.save(tmp_path, "PNG")
        return tmp_path
    except Exception:
        return src_path

ROUND_CHANNEL_LOGO = make_round_logo(channel_logo)

# A small padded container so that content under a heading has a subtle
# left/right inset, visually "belonging" to the heading block.
PADDING_UNDER_HEADING_LR = 10  # tweak as desired

def padded_block(flowables, left=PADDING_UNDER_HEADING_LR, right=PADDING_UNDER_HEADING_LR):
    """A splittable padded container: one row per flowable so it can break across pages.
    Avoids KeepInFrame to prevent LayoutError on long sections.
    """
    total_w = PAGE_W - M_L - M_R
    rows = [[f] for f in flowables]  # one flowable per row => table can split cleanly
    tbl = Table(rows, colWidths=[total_w])
    tbl.setStyle(TableStyle([
        ("VALIGN", (0,0), (-1,-1), "TOP"),
        ("LEFTPADDING",  (0,0), (-1,-1), left),
        ("RIGHTPADDING", (0,0), (-1,-1), right),
        ("TOPPADDING",   (0,0), (-1,-1), 4),
        ("BOTTOMPADDING",(0,0), (-1,-1), 2),
    ]))
    return tbl

# Page decorations

def draw_letterhead(c: pdfcanvas.Canvas):
    header_h = 72
    c.setFillColor(BLUE); c.rect(0, PAGE_H - header_h, PAGE_W, header_h, fill=1, stroke=0)
    c.setFillColor(colors.white)
    c.setFont(BASE_BLD, 13.5)
    c.drawString(40, PAGE_H - 30, "PHD CAPITAL PVT LTD")
    c.setFont(BASE_REG, 8.5)
    c.drawString(40, PAGE_H - 45, "SEBI Regd No - INH000016126  |  AMFI Regd No - ARN-301724  |  APMI Regd No - APRN00865")
    c.drawString(40, PAGE_H - 58, "BSE Regd No - 6152  |  CIN No.- U67190WB2020PTC237908")
    try:
        c.drawImage(company_logo, PAGE_W - 90, PAGE_H - 55, 48, 24, preserveAspectRatio=True, mask='auto')
    except Exception:
        pass

def draw_blue_stripe_header(c: pdfcanvas.Canvas):
    stripe_h = 20
    c.setFillColor(BLUE); c.rect(0, PAGE_H - stripe_h, PAGE_W, stripe_h, fill=1, stroke=0)

# Updated footer per requirements
# Left: logo + channel name + "YouTube Channel" (left aligned within left half)
# Right: YouTube URL (right aligned within right half)
# Both share the same vertical center alignment (same baseline region)

def draw_footer(c: pdfcanvas.Canvas):
    # Page number centered at bottom
    c.setFont(BASE_REG, 8.5)
    c.setFillColor(colors.black)
    c.drawCentredString(PAGE_W/2.0, 16, f"Page {c.getPageNumber()}")

    total_w = PAGE_W - M_L - M_R
    col_w = total_w / 2.0
    left_x = M_L
    right_x = M_L + col_w
    baseline_y = 30  # common vertical reference

    # ---- Left block: left aligned
    logo_sz = 18
    cur_x = left_x
    try:
        c.drawImage(ROUND_CHANNEL_LOGO, cur_x, baseline_y - logo_sz/2, logo_sz, logo_sz,
                    preserveAspectRatio=True, mask='auto')
    except Exception:
        c.setStrokeColor(BLUE); c.circle(cur_x + logo_sz/2, baseline_y, logo_sz/2, stroke=1, fill=0)
    cur_x += logo_sz + 6

    c.setFillColor(BLUE)
    c.setFont(BASE_BLD, 9)
    c.drawString(cur_x, baseline_y + 4, channel_name)
    c.setFont(BASE_REG, 8)
    c.drawString(cur_x, baseline_y - 7, "YouTube Channel")

    # ---- Right block: right aligned text within right half
    url_text = channel_url
    c.setFont(BASE_REG, 9)
    c.setFillColor(BLUE)
    url_w = c.stringWidth(url_text, BASE_REG, 9)
    url_x = right_x + col_w - url_w  # right align within right column
    c.drawString(url_x, baseline_y - 2, url_text)

# First/other pages

def on_first_page(c: pdfcanvas.Canvas, d: SimpleDocTemplate):
    draw_letterhead(c); draw_footer(c)

def on_later_pages(c: pdfcanvas.Canvas, d: SimpleDocTemplate):
    draw_blue_stripe_header(c); draw_footer(c)

# ========= Doc =========
doc = SimpleDocTemplate(
    output_pdf, pagesize=A4,
    leftMargin=M_L, rightMargin=M_R, topMargin=M_T, bottomMargin=M_B
)

story = []

# ======== Positional + Date/Time row ========

def positional_date_time(date_text: str, time_text: str):
    """Two-column row: LEFT = rounded heading chip; RIGHT = date/time on white.
    Avoid overlaying dark chip behind date/time (per screenshot).
    """
    total_w = PAGE_W - M_L - M_R
    left_w  = total_w * 0.40
    right_w = total_w - left_w

    left_chip = RoundedHeading(
        "Positional", fontSize=13.5, pad_x=12, pad_y=10, radius=8,
        bg=BLUE, fg=colors.white, width=left_w, align="left"
    )

    right_bits = []
    if date_text:
        right_bits.append(Paragraph(f"<b>Date:</b> {date_text}", date_bold))
    if time_text:
        right_bits.append(Paragraph(f"Time: {time_text}", time_small))

    # Use a tiny table to stack date/time; ensure white background and no overlap
    right_stack = Table([[b] for b in right_bits] or [[Spacer(1,0)]], colWidths=[right_w])
    right_stack.setStyle(TableStyle([
        ("ALIGN", (0,0), (-1,-1), "RIGHT"),
        ("VALIGN", (0,0), (-1,-1), "TOP"),
        ("LEFTPADDING", (0,0), (-1,-1), 0),
        ("RIGHTPADDING", (0,0), (-1,-1), 0),
        ("TOPPADDING", (0,0), (-1,-1), 0),
        ("BOTTOMPADDING", (0,0), (-1,-1), 0),
        ("BACKGROUND", (0,0), (-1,-1), colors.white),
    ]))

    tbl = Table([[left_chip, right_stack]], colWidths=[left_w, right_w])
    tbl.setStyle(TableStyle([
        ("VALIGN", (0,0), (-1,-1), "TOP"),
        ("LEFTPADDING", (0,0), (-1,-1), 0),
        ("RIGHTPADDING", (0,0), (-1,-1), 0),
        ("TOPPADDING", (0,0), (-1,-1), 0),
        ("BOTTOMPADDING", (0,0), (-1,-1), 2),
    ]))
    return tbl

# Charts full-width

def full_width_chart(path):
    max_w = PAGE_W - M_L - M_R
    h = max(3.2*inch, min(max_w * 9/16, 4.8*inch))
    return Image(path, width=max_w, height=h)

# ========= Stock Pages =========
for _, row in df.iterrows():
    date_val = str(row.get("DATE", "") or "").strip()
    time_val = str(row.get("START TIME", "") or "").strip()

    story.append(positional_date_time(date_val, time_val))
    story.append(Spacer(1, 10))

    # LISTED NAME (SYMBOL)
    listed = str(row.get("LISTED NAME", "") or "").strip()
    symbol = str(row.get("STOCK SYMBOL", "") or "").strip()
    title_line = f"{listed} ({symbol})" if symbol else listed
    story.append(Paragraph(title_line, subheading_style))
    story.append(Spacer(1, 8))

    # Chart
    chart_path = str(row.get("CHART PATH", "") or "").strip()
    if chart_path and os.path.exists(chart_path):
        try:
            story.append(full_width_chart(chart_path))
            story.append(Spacer(1, 14))
        except Exception:
            story.append(Paragraph("<i>Chart unavailable</i>", small_grey))
            story.append(Spacer(1, 10))
    else:
        story.append(Paragraph("<i>Chart unavailable</i>", small_grey))
        story.append(Spacer(1, 10))

    # Rationale heading (rounded) with a bit more space below the heading
    story.append(heading("Rationale"))
    story.append(Spacer(1, 10))  # increased spacing below heading as requested

    # Content under heading gets slight left/right padding
    analysis_text = str(row.get("ANALYSIS", "") or "—").strip()
    under_rationale = [
        Paragraph("<b>OUR GENERAL VIEW</b>", label_style),
        Spacer(1, 2),
        Paragraph(analysis_text, body_style),
    ]
    story.append(padded_block(under_rationale))

    story.append(PageBreak())

# ========= Disclaimer & Disclosures =========
# (Spacing: small gap after headings before text starts; text inside a padded block.)

# Disclaimer
story.append(heading("Disclaimer"))
story.append(Spacer(1, 6))  # little space then text start

_disclaimer = """
Registration granted by SEBI, membership of BSE and certification from NISM in no way guarantee
performance of the intermediary or provide any assurance of returns to investors.
Investments in securities market are subject to market risks. Read all the related documents carefully
before investing.
PHD CAPITAL PRIVATE LIMITED (hereinafter referred to as “the Company”) has neither been
suspended nor debarred from doing business by any Stock Exchange / SEBI or any other
authorities; nor has its certificate of registration been cancelled by SEBI at any point of time. There
are no outstanding litigations or disciplinary history against PHD Capital Private Limited. The
Company is not engaged in merchant banking, investment banking or any brokerage services.
Analyst Certification: The views expressed in this research report ("Report") accurately reflect the
personal views of the research analysts ("Analysts") employed by PHD Capital Pvt Ltd about be of
the subject issuer(s) or company(ies) or securities. This report has been prepared based upon
information available to the public and sources, believed to be reliable. I/We also certify that no
part of my/our compensation was, is, or will be directly or indirectly related to the specific
recommendation(s) or view(s) in this report.
The Analysts engaged in preparation of this Report or his/her relative (a) do not have any
financial interests in the subject company mentioned in this Report; (b) do not own 1% or more of
the equity securities of the subject company mentioned in the report as of the last day of the month
preceding the publication of the research report; (c) do not have any material conflict of interest at
the time of publication of the Report.
The Analysts engaged in preparation of this Report: (a) have not received any compensation
from the subject company in the past twelve months; (b) have not managed or co-managed public
offering of securities for the subject company in the past twelve months; (c) have not received any
compensation for investment banking or merchant banking or brokerage services from the
subject company in the past twelve months; (d) have not received any compensation for products or
services other than investment banking or merchant banking or brokerage services from the
subject company in the past twelve months; (e) has not received any compensation or other
benefits from the subject company or third party in connection with the Report; (f) has not served
as an officer, director or employee of the subject company; (g) is not engaged in market making
activity for the subject company.
""".strip()

story.append(padded_block([Paragraph(_disclaimer, body_style)]))
story.append(Spacer(1, 10))

# Disclosure (single heading; includes both previous disclosure blocks merged)
story.append(heading("Disclosure"))
story.append(Spacer(1, 6))

_disclosure_bt = """
<b>Disclosure on Back-testing:</b> "Back-testing" is the application of a quantitative model to historical market
data to generate hypothetical performance during a prior period. Use of back-tested data has inherent
limitations including the following:
• The results do not reflect the results of actual trading or the effect of material economic and
  market conditions on the decision-making process, but were achieved by means of retrospective
  application, which may have been designed with the benefit of hindsight
• Calculation of such back-tested performance data is based on assumptions integral to the model
  which may or may not be testable and are therefore subject to losses.
• Actual performance may differ significantly from back-tested performance. Back tested results are
  not adjusted to reflect the reinvestment of dividends and other income and, except where
  otherwise indicated, do not include the effect of back tested transaction costs.
• Back-tested returns do not represent actual returns and should not be interpreted as an indication
  of such.
""".strip()

_disclosure_ratings = """
<b>Disclosure on Ratings:</b><br/>
• <b>CMP (Current Market Price):</b> The live trading price of a stock at the time of recommendation.<br/>
• <b>Entry Price:</b> The specific price at which a stock is recommended to be bought or Sold.<br/>
• <b>Buy:</b> A recommendation to purchase a stock for making profit expecting its price to rise.<br/>
• <b>Sell:</b> A recommendation to Sell a stock for making profit expecting its price to fall.<br/>
• <b>Hold:</b> A neutral recommendation to neither buy nor sell, suggesting the stock will perform
  in line with the market and keeping the position intact.<br/>
• <b>Book Partially:</b> Exiting a portion of your Position to lock in some profit, while keeping the rest.<br/>
• <b>Exit:</b> The recommendation to cut the whole position either to take profit or cut losses.<br/>
• <b>Book Loss:</b> Exiting the whole position to book the accumulated loss.<br/>
• <b>Book Full Profit (Book Profit):</b> Exiting the whole position to take all the accumulated gains.<br/>
• <b>Revise Stop Loss (SL):</b> Adjusting pre-set loss-limiting price.<br/>
• <b>Trailing Stop Loss:</b> Adjusting pre-set loss-limiting price, usually to protect profits as the
  stock price increases.<br/>
• <b>Revise Target:</b> Adjusting the expected future price of a stock based on new information or price action.<br/>
• <b>1st/2nd/3rd targets:</b> Staggered price goals for a stock, suggesting points at which to partially book profits.<br/>
• <b>ROI (Return on Investment):</b> A percentage showing how much profit has been made compared to the initial investment.
""".strip()

_other_disclosures = """
<b>Other Disclosures:</b> This report has been prepared by PHD Capital Pvt Ltd and is solely for
information of the recipient only. The report must not be used as a singular basis of any investment
decision. The views herein are of a general nature and do not consider the risk appetite or the
circumstances of an individual investor; readers are requested to take professional advice before investing.
""".strip()

_legal_block = """
Nothing in this document should be construed as investment advice. Each recipient of this
document should make such investigations as they deem necessary to arrive at an independent
evaluation of an investment in securities of the companies referred to in this document (including
merits and risks) and should consult their own advisors to determine merits and risks of such
investment. The information and opinions contained herein have been compiled or arrived at,
based upon information obtained in good faith from sources believed to be reliable. Such
information has not been independently verified and no guaranty, representation of warranty,
express or implied, is made as to its accuracy, completeness or correctness. All such information
and opinions are subject to change without notice.
Descriptions of any company or companies or their securities mentioned herein are not intended
to be complete. PHD Capital Pvt Ltd is not obliged to update this report for such changes. PHD
Capital Pvt Ltd has the right to make changes and modifications at any time.
This report is not directed to, or intended for display, downloading, printing, reproducing or for
distribution to or use by, any person or entity who is a citizen or resident or located in any locality,
state, country or other jurisdiction where such distribution, publication, reproduction, availability
or use would be contrary to law or regulation or what would subject PHD Capital Pvt Ltd or its
affiliates to any registration or licensing requirement within such jurisdiction. If this report is
inadvertently sent or has reached any person in such country, especially, United States of America,
the same should be ignored and brought to the attention of the sender.
This document may not be reproduced, distributed or published in whole or in part, directly or
indirectly, for any purposes or in any manner. Foreign currencies, denominated securities,
wherever mentioned, are subject to exchange rate fluctuations, which could have an adverse
effect on their value or price, or the income derived from them. In addition, investors in securities
such as ADRs, the values of which are influenced by foreign currencies effectively assume currency risk.
This document is not, and should not, be construed as an offer or solicitation, to buy or sell any
securities or other financial instruments. This report should not be construed as an invitation or
solicitation to do business with PHD Capital Pvt Ltd. PHD Capital Pvt Ltd may from time to time
solicit from, or perform broking, or other services for, any company mentioned in this report.
PHD Capital Pvt Ltd, its affiliates, group companies, directors, and employees did not receive
any compensation or other benefits from the companies mentioned in the report or third party in
connection with preparation of the research report. Accordingly, neither PHD Capital Pvt Ltd nor
Research Analysts have any material conflict of interest at the time of publication of this report.
While the above statements are true for this report, investors should be aware that PHD Capital
Pvt Ltd, its affiliates, group companies, directors, and employees may, in other circumstances
or at a future time, engage in activities that could present potential conflicts. These activities
include but are not limited to; holding investment positions in and trading the securities of
companies mentioned herein; acting as a market maker, advisor, or lender/borrower to such
companies; or engaging in other transactions to earn brokerage or other compensation. Any such
conflict of interest will be appropriately disclosed and managed in accordance with applicable law.
""".strip()

merged_disclosure_flow = [
    Paragraph(_disclosure_bt, body_style),
    Spacer(1, 6),
    Paragraph(_disclosure_ratings, body_style),
    Spacer(1, 8),
    Paragraph(_other_disclosures, body_style),
    Spacer(1, 10),
    Paragraph(_legal_block, body_style),
]

story.append(padded_block(merged_disclosure_flow))
story.append(Spacer(1, 12))

# ===== Firm & Contacts (ensure bold labels as requested) =====
firm_head = """
<b>State the Name of associate entities, with CIN / Reg No and address:</b> NIL<br/>
<b>Registered office of PHD CAPITAL PRIVATE LIMITED:</b> Sadpur-Maslandpur, Habra-1, Maslandapur,
Basirhat Road, 24 Parganas North, Maslandapur, BARASAT, WEST BENGAL, 743289<br/>
<b>SEBI Research Analyst Registration No.:</b> INH000016126 / <b>CIN</b> - U67190WB2020PTC237908.<br/>
The company is a member of <b>BSE</b> with Membership Number <b>6152</b>.<br/>
Website – www.phdcapital.in<br/>
Tel : +91 3216 297 100<br/>
<b>Support</b> - Contact us at <u>support@phdcapital.in</u> for any queries and assistance.<br/>
All grievances should be addressed to our Compliance Officer <b>Mr. Pradip Halder</b> using
<u>compliance@phdcapital.in</u>.
""".strip()

left_block = """
<b>Compliance Office Details:</b><br/>
Name: Pradip Halder<br/>
Email: compliance@phdcapital.in<br/>
Contact: +91 3216 297 100<br/><br/>
<b>Principal Officer Details:</b><br/>
Name: Pritam Sardar<br/>
Email: pritam@phdcapital.in<br/>
Contact: +91 8371887303
""".strip()

right_block = """
<b>Grievance Office Details:</b><br/>
Name: Pradip Halder<br/>
Email: compliance@phdcapital.in<br/>
Contact: +91 3216 297 100<br/><br/>
<b>Contact Details:</b><br/>
Contact: +91 3216 297 100<br/>
Email: support@phdcapital.in
""".strip()

# Firm head paragraph (under slight padding as well)
story.append(padded_block([Paragraph(firm_head, body_style)]))
story.append(Spacer(1, 10))

# 2-column contact blocks (labels already bold via <b>..</b>)
col_w = (PAGE_W - M_L - M_R) / 2.0
contacts_tbl = Table(
    [[Paragraph(left_block, body_style), Paragraph(right_block, body_style)]],
    colWidths=[col_w, col_w]
)
contacts_tbl.setStyle(TableStyle([
    ("VALIGN", (0,0), (-1,-1), "TOP"),
    ("LEFTPADDING", (0,0), (-1,-1), 0),
    ("RIGHTPADDING", (0,0), (-1,-1), 16),
    ("TOPPADDING", (0,0), (-1,-1), 0),
    ("BOTTOMPADDING", (0,0), (-1,-1), 0),
]))

# Wrap contacts table inside a padded block so it visually sits under the previous heading context
story.append(padded_block([contacts_tbl]))
story.append(Spacer(1, 14))

# Centered Signature
story.append(Paragraph("<b>Signature of the Associated Analysts</b>", center_small))

# Build
doc.build(
    story,
    onFirstPage=lambda c, d: (draw_letterhead(c), draw_footer(c)),
    onLaterPages=lambda c, d: (draw_blue_stripe_header(c), draw_footer(c))
)

print(f"PDF generated: {output_pdf}")
