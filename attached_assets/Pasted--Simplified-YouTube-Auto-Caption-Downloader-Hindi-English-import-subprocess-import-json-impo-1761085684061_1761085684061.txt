# ‚úÖ Simplified YouTube Auto Caption Downloader (Hindi/English)
import subprocess
import json
import re
import os
import glob

# ---------- Helpers ----------
def extract_video_id(url):
    match = re.search(r"(?:v=|youtu\.be/|/embed/)([A-Za-z0-9_-]{6,})", url)
    return match.group(1) if match else "video"

def run_cmd(cmd):
    proc = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
    return proc.returncode, proc.stdout, proc.stderr

def time_to_ms(timestr):
    parts = timestr.split(":")
    try:
        parts = [float(p) for p in parts]
    except:
        return 0
    if len(parts) == 3:
        h, m, s = parts
    elif len(parts) == 2:
        h = 0
        m, s = parts
    else:
        return int(parts[0] * 1000)
    return int((h * 3600 + m * 60 + s) * 1000)

def parse_vtt(vtt_text):
    events = []
    lines = vtt_text.splitlines()
    cur_start, cur_end, cur_text_lines = None, None, []
    for line in lines:
        line = line.strip()
        if not line:
            if cur_start and cur_text_lines:
                text = " ".join(cur_text_lines).strip()
                events.append({
                    'tStartMs': time_to_ms(cur_start),
                    'dDurationMs': time_to_ms(cur_end) - time_to_ms(cur_start),
                    'segs': [{'utf8': text}]
                })
            cur_start, cur_end, cur_text_lines = None, None, []
            continue
        if "-->" in line:
            parts = line.split("-->")
            cur_start = parts[0].strip()
            cur_end = parts[1].strip()
        else:
            cur_text_lines.append(line)
    return {'events': events}


# ---------- Main ----------
url = input("Enter YouTube video URL: ").strip()
if not url:
    raise ValueError("Please enter a valid YouTube video URL.")

video_id = extract_video_id(url)
folder_path = os.path.join(os.getcwd(), f"captions_{video_id}")
os.makedirs(folder_path, exist_ok=True)

print("‚è≥ Downloading auto-generated captions (Hindi/English)...")

cmd = [
    "yt-dlp",
    "--skip-download",
    "--write-auto-subs",
    "--sub-lang", "hi,en",
    "--sub-format", "json3/vtt/srt",
    "-o", os.path.join(folder_path, "youtube.%(ext)s"),
    url
]

rc, out, err = run_cmd(cmd)

# Find any subtitle file
subs_found = glob.glob(os.path.join(folder_path, "youtube.*"))
subs_found = [p for p in subs_found if p.lower().endswith(('.json3', '.vtt', '.srt'))]

if not subs_found:
    print("‚ö†Ô∏è No subtitles found. Maybe captions are disabled for this video.")
else:
    target_json = os.path.join(folder_path, "captions.json")

    if any(f.endswith(".json3") for f in subs_found):
        src = [f for f in subs_found if f.endswith(".json3")][0]
        with open(src, "r", encoding="utf-8") as f:
            data = json.load(f)
        with open(target_json, "w", encoding="utf-8") as outj:
            json.dump(data, outj, ensure_ascii=False, indent=2)
        print("‚úÖ Captions saved (from JSON3):", target_json)

    elif any(f.endswith(".vtt") for f in subs_found):
        src = [f for f in subs_found if f.endswith(".vtt")][0]
        with open(src, "r", encoding="utf-8", errors="ignore") as f:
            vtt_text = f.read()
        data = parse_vtt(vtt_text)
        with open(target_json, "w", encoding="utf-8") as outj:
            json.dump(data, outj, ensure_ascii=False, indent=2)
        print("‚úÖ Captions saved (from VTT):", target_json)

    else:
        print("‚ö†Ô∏è Only SRT found ‚Äî convert manually if needed.")

print("üéâ Done! Folder:", folder_path)
