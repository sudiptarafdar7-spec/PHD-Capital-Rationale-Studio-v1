# Step 9: Get Securities ID and Other Data from Master File (robust fixed + final normalized fallback)
import pandas as pd
import os
import re
from rapidfuzz import fuzz, process

# --- Step 1: File paths ---
input_csv = "/content/extracted_stocks.csv"
api_file = "/content/api-scrip-master.csv"
output_file = "/content/mapped_master_file.csv"

# --- Step 2: Load API Master File ---
df_api = pd.read_csv(api_file, low_memory=False)

# --- Step 3: Filter for EQUITY only ---
df_api = df_api[df_api["SEM_INSTRUMENT_NAME"].astype(str).str.upper() == "EQUITY"].copy()

# --- Step 4: Normalize text fields ---
def normalize_text(s):
    """Clean text for matching (remove special chars, multiple spaces)."""
    if not isinstance(s, str):
        s = str(s)
    s = re.sub(r"[^A-Z0-9]", "", s.upper())  # Keep only alphanumerics
    return s.strip()

for col in ["SEM_TRADING_SYMBOL", "SEM_CUSTOM_SYMBOL", "SM_SYMBOL_NAME", "SEM_EXM_EXCH_ID"]:
    if col in df_api.columns:
        df_api[col] = df_api[col].astype(str).str.strip().str.upper()
    else:
        df_api[col] = ""

# Add normalized matching columns
df_api["SEM_CUSTOM_SYMBOL_NORM"] = df_api["SEM_CUSTOM_SYMBOL"].apply(normalize_text)
df_api["SM_SYMBOL_NAME_NORM"] = df_api["SM_SYMBOL_NAME"].apply(normalize_text)
df_api["SEM_TRADING_SYMBOL_NORM"] = df_api["SEM_TRADING_SYMBOL"].apply(normalize_text)

# Add Exchange priority: NSE > BSE > Others
df_api["exchange_priority"] = df_api["SEM_EXM_EXCH_ID"].apply(
    lambda x: 1 if x == "NSE" else (2 if x == "BSE" else 3)
)

# --- Step 5: Helper functions ---
def fuzzy_match(value, target_series, threshold=80):
    """Return best fuzzy match index or None."""
    if not value or not isinstance(value, str):
        return None
    value_norm = normalize_text(value)
    choices = target_series.tolist()
    result = process.extractOne(value_norm, choices, scorer=fuzz.token_sort_ratio)
    if result and result[1] >= threshold:
        matched_value = result[0]
        idx_list = target_series[target_series == matched_value].index
        if len(idx_list) > 0:
            return idx_list[0]
    return None

def normalize_columns(df):
    """Clean and standardize column names."""
    df.columns = df.columns.str.strip().str.upper().str.replace("  ", " ")
    return df

# --- Step 6: Load input file ---
df_input = pd.read_csv(input_csv)
df_input = normalize_columns(df_input)

# Identify symbol and name columns
possible_symbol_cols = [c for c in df_input.columns if "SYMBOL" in c]
possible_name_cols = [c for c in df_input.columns if "NAME" in c and "STOCK" in c]

if not possible_symbol_cols:
    raise ValueError("❌ Could not find 'STOCK SYMBOL' column in input file.")
if not possible_name_cols:
    raise ValueError("❌ Could not find 'STOCK NAME' column in input file.")

symbol_col = possible_symbol_cols[0]
name_col = possible_name_cols[0]

df_input[symbol_col] = df_input[symbol_col].astype(str).str.strip().str.upper()
df_input[name_col] = df_input[name_col].astype(str).str.strip().str.upper()

# Add normalized versions for fuzzy
df_input["SYMBOL_NORM"] = df_input[symbol_col].apply(normalize_text)
df_input["NAME_NORM"] = df_input[name_col].apply(normalize_text)

results = []

# --- Step 7: Matching logic for each stock ---
for _, row in df_input.iterrows():
    stock_symbol = row[symbol_col]
    stock_name = row[name_col]
    start_time = row.get("START TIME", "")

    match = None
    match_source = ""

    # Exact matches first
    candidates = df_api[df_api["SEM_TRADING_SYMBOL"] == stock_symbol]
    if not candidates.empty:
        match_source = "SEM_TRADING_SYMBOL"

    if candidates.empty:
        candidates = df_api[df_api["SEM_CUSTOM_SYMBOL"] == stock_symbol]
        if not candidates.empty:
            match_source = "SEM_CUSTOM_SYMBOL"

    if candidates.empty:
        candidates = df_api[df_api["SM_SYMBOL_NAME"] == stock_symbol]
        if not candidates.empty:
            match_source = "SM_SYMBOL_NAME"

    # Fuzzy matching for names and symbols
    if candidates.empty:
        idx = fuzzy_match(stock_symbol, df_api["SEM_CUSTOM_SYMBOL_NORM"])
        if idx is not None:
            candidates = df_api.loc[[idx]]
            match_source = "SEM_CUSTOM_SYMBOL (fuzzy symbol)"

    if candidates.empty:
        idx = fuzzy_match(stock_symbol, df_api["SM_SYMBOL_NAME_NORM"])
        if idx is not None:
            candidates = df_api.loc[[idx]]
            match_source = "SM_SYMBOL_NAME (fuzzy symbol)"

    if candidates.empty:
        idx = fuzzy_match(stock_name, df_api["SEM_CUSTOM_SYMBOL_NORM"])
        if idx is not None:
            candidates = df_api.loc[[idx]]
            match_source = "SEM_CUSTOM_SYMBOL (fuzzy name)"

    if candidates.empty:
        idx = fuzzy_match(stock_name, df_api["SM_SYMBOL_NAME_NORM"])
        if idx is not None:
            candidates = df_api.loc[[idx]]
            match_source = "SM_SYMBOL_NAME (fuzzy name)"

    # --- FINAL FALLBACK: Normalize STOCK NAME & SEM_TRADING_SYMBOL ---
    if candidates.empty:
        stock_name_norm = normalize_text(stock_name)
        idx_list = df_api[df_api["SEM_TRADING_SYMBOL_NORM"] == stock_name_norm].index
        if len(idx_list) > 0:
            candidates = df_api.loc[idx_list]
            match_source = "SEM_TRADING_SYMBOL (normalized STOCK NAME fallback)"

    # Pick NSE first
    if not candidates.empty:
        candidates = candidates.sort_values(by="exchange_priority")
        match = candidates.iloc[0]

    # --- Prepare output ---
    if match is not None:
        listed_name = match.get("SM_SYMBOL_NAME", "")
        short_name = match.get("SEM_CUSTOM_SYMBOL", "")
        security_id = match.get("SEM_SMST_SECURITY_ID", "")
        exchange = match.get("SEM_EXM_EXCH_ID", "")
        instrument = match.get("SEM_INSTRUMENT_NAME", "")
        segment = match.get("SEM_SEGMENT", "")

        if "SEM_CUSTOM_SYMBOL" in match_source:
            short_name = stock_symbol or short_name
        elif "SM_SYMBOL_NAME" in match_source:
            listed_name = stock_symbol or listed_name

        results.append({
            "STOCK NAME": stock_name,
            "STOCK SYMBOL": stock_symbol,
            "LISTED NAME": listed_name,
            "SHORT NAME": short_name,
            "SECURITY ID": security_id,
            "EXCHANGE": exchange,
            "INSTRUMENT": instrument,
            "SEGMENT": segment,
            "START TIME": start_time
        })
        print(f"✅ {stock_symbol} matched via {match_source} ({exchange})")
    else:
        print(f"❌ No match for: {stock_symbol} ({stock_name})")
        results.append({
            "STOCK NAME": stock_name,
            "STOCK SYMBOL": stock_symbol,
            "LISTED NAME": "",
            "SHORT NAME": "",
            "SECURITY ID": "",
            "EXCHANGE": "",
            "INSTRUMENT": "",
            "SEGMENT": "",
            "START TIME": start_time
        })

# --- Step 8: Save final output ---
final_df = pd.DataFrame(results)
final_df.to_csv(output_file, index=False)
print(f"\n✅ Processed and saved: {output_file}\n")
