# Step 10: Convert to Actual Time and Insert Date
import pandas as pd
import os
import datetime

# --- Step 2: File paths ---
input_csv = "/content/input.csv"   # has Folder Path, Date, Time columns

# --- Helper: convert hh:mm:ss to timedelta ---
def to_timedelta(t):
    try:
        parts = [int(x) for x in str(t).split(":")]
        if len(parts) == 3:
            return datetime.timedelta(hours=parts[0], minutes=parts[1], seconds=parts[2])
        elif len(parts) == 2:
            return datetime.timedelta(minutes=parts[0], seconds=parts[1])
        else:
            return datetime.timedelta(seconds=parts[0])
    except:
        return datetime.timedelta(0)

# --- Step 3: Process each folder path from input.csv ---
df_input = pd.read_csv(input_csv)

for _, row in df_input.iterrows():
    folder_path = row["Folder Path"]
    base_time_str = str(row["Time"]).strip()   # base clock time in HH:MM:SS
    base_date_str = str(row["Date"]).strip()   # date in YYYY-MM-DD

    stocks_file = os.path.join(folder_path, "mapped_master_file.csv")
    output_file = os.path.join(folder_path, "stocks_with_date_time.csv")

    if not os.path.exists(stocks_file):
        print(f"⚠️ Skipping {folder_path}, no mapped_master_file.csv found.")
        continue

    try:
        # Load file
        df = pd.read_csv(stocks_file)

        # Convert base clock time
        base_time = datetime.datetime.strptime(base_time_str, "%H:%M:%S")

        new_start_times = []
        for t in df["START TIME"]:
            # video-relative offset
            offset = to_timedelta(t)
            actual_time = (base_time + offset).strftime("%H:%M:00")  # round seconds to 00
            new_start_times.append(actual_time)

        df["START TIME"] = new_start_times
        df["DATE"] = base_date_str

        # Reorder columns
        final_cols = [
            "STOCK NAME", "STOCK SYMBOL", "LISTED NAME", "SHORT NAME",
            "SECURITY ID", "EXCHANGE", "INSTRUMENT", "SEGMENT",
            "START TIME", "DATE"
        ]
        df = df.reindex(columns=final_cols)

        # Save updated file
        df.to_csv(output_file, index=False)
        print(f"✅ Updated and saved: {output_file}")

    except Exception as e:
        print(f"❌ Error processing {folder_path}: {e}")
